// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  phoneNumber: (where?: PhoneNumberWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  productPhoto: (where?: ProductPhotoWhereInput) => Promise<boolean>;
  productRating: (where?: ProductRatingWhereInput) => Promise<boolean>;
  review: (where?: ReviewWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userPhoto: (where?: UserPhotoWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  phoneNumbers: (
    args?: {
      where?: PhoneNumberWhereInput;
      orderBy?: PhoneNumberOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PhoneNumber>;
  phoneNumbersConnection: (
    args?: {
      where?: PhoneNumberWhereInput;
      orderBy?: PhoneNumberOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PhoneNumberConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductPromise;
  products: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Product>;
  productsConnection: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductConnectionPromise;
  productPhoto: (where: ProductPhotoWhereUniqueInput) => ProductPhotoPromise;
  productPhotos: (
    args?: {
      where?: ProductPhotoWhereInput;
      orderBy?: ProductPhotoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ProductPhoto>;
  productPhotosConnection: (
    args?: {
      where?: ProductPhotoWhereInput;
      orderBy?: ProductPhotoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductPhotoConnectionPromise;
  productRatings: (
    args?: {
      where?: ProductRatingWhereInput;
      orderBy?: ProductRatingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ProductRating>;
  productRatingsConnection: (
    args?: {
      where?: ProductRatingWhereInput;
      orderBy?: ProductRatingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductRatingConnectionPromise;
  review: (where: ReviewWhereUniqueInput) => ReviewPromise;
  reviews: (
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Review>;
  reviewsConnection: (
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ReviewConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  userPhoto: (where: UserPhotoWhereUniqueInput) => UserPhotoPromise;
  userPhotos: (
    args?: {
      where?: UserPhotoWhereInput;
      orderBy?: UserPhotoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserPhoto>;
  userPhotosConnection: (
    args?: {
      where?: UserPhotoWhereInput;
      orderBy?: UserPhotoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserPhotoConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPhoneNumber: (data: PhoneNumberCreateInput) => PhoneNumberPromise;
  updateManyPhoneNumbers: (
    args: {
      data: PhoneNumberUpdateManyMutationInput;
      where?: PhoneNumberWhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyPhoneNumbers: (
    where?: PhoneNumberWhereInput
  ) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (
    args: { data: ProductUpdateInput; where: ProductWhereUniqueInput }
  ) => ProductPromise;
  updateManyProducts: (
    args: { data: ProductUpdateManyMutationInput; where?: ProductWhereInput }
  ) => BatchPayloadPromise;
  upsertProduct: (
    args: {
      where: ProductWhereUniqueInput;
      create: ProductCreateInput;
      update: ProductUpdateInput;
    }
  ) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createProductPhoto: (data: ProductPhotoCreateInput) => ProductPhotoPromise;
  updateProductPhoto: (
    args: { data: ProductPhotoUpdateInput; where: ProductPhotoWhereUniqueInput }
  ) => ProductPhotoPromise;
  updateManyProductPhotos: (
    args: {
      data: ProductPhotoUpdateManyMutationInput;
      where?: ProductPhotoWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertProductPhoto: (
    args: {
      where: ProductPhotoWhereUniqueInput;
      create: ProductPhotoCreateInput;
      update: ProductPhotoUpdateInput;
    }
  ) => ProductPhotoPromise;
  deleteProductPhoto: (
    where: ProductPhotoWhereUniqueInput
  ) => ProductPhotoPromise;
  deleteManyProductPhotos: (
    where?: ProductPhotoWhereInput
  ) => BatchPayloadPromise;
  createProductRating: (data: ProductRatingCreateInput) => ProductRatingPromise;
  updateManyProductRatings: (
    args: {
      data: ProductRatingUpdateManyMutationInput;
      where?: ProductRatingWhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyProductRatings: (
    where?: ProductRatingWhereInput
  ) => BatchPayloadPromise;
  createReview: (data: ReviewCreateInput) => ReviewPromise;
  updateReview: (
    args: { data: ReviewUpdateInput; where: ReviewWhereUniqueInput }
  ) => ReviewPromise;
  updateManyReviews: (
    args: { data: ReviewUpdateManyMutationInput; where?: ReviewWhereInput }
  ) => BatchPayloadPromise;
  upsertReview: (
    args: {
      where: ReviewWhereUniqueInput;
      create: ReviewCreateInput;
      update: ReviewUpdateInput;
    }
  ) => ReviewPromise;
  deleteReview: (where: ReviewWhereUniqueInput) => ReviewPromise;
  deleteManyReviews: (where?: ReviewWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserPhoto: (data: UserPhotoCreateInput) => UserPhotoPromise;
  updateUserPhoto: (
    args: { data: UserPhotoUpdateInput; where: UserPhotoWhereUniqueInput }
  ) => UserPhotoPromise;
  updateManyUserPhotos: (
    args: {
      data: UserPhotoUpdateManyMutationInput;
      where?: UserPhotoWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUserPhoto: (
    args: {
      where: UserPhotoWhereUniqueInput;
      create: UserPhotoCreateInput;
      update: UserPhotoUpdateInput;
    }
  ) => UserPhotoPromise;
  deleteUserPhoto: (where: UserPhotoWhereUniqueInput) => UserPhotoPromise;
  deleteManyUserPhotos: (where?: UserPhotoWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  phoneNumber: (
    where?: PhoneNumberSubscriptionWhereInput
  ) => PhoneNumberSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  productPhoto: (
    where?: ProductPhotoSubscriptionWhereInput
  ) => ProductPhotoSubscriptionPayloadSubscription;
  productRating: (
    where?: ProductRatingSubscriptionWhereInput
  ) => ProductRatingSubscriptionPayloadSubscription;
  review: (
    where?: ReviewSubscriptionWhereInput
  ) => ReviewSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userPhoto: (
    where?: UserPhotoSubscriptionWhereInput
  ) => UserPhotoSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserType = "ADMIN" | "SELLER" | "CONSUMER";

export type PhoneNumberOrderByInput =
  | "code_ASC"
  | "code_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "review_text_ASC"
  | "review_text_DESC"
  | "review_time_friendly_ASC"
  | "review_time_friendly_DESC"
  | "timestamp_ASC"
  | "timestamp_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductPhotoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "thumb_url_ASC"
  | "thumb_url_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "timestamp_ASC"
  | "timestamp_DESC"
  | "friendly_time_ASC"
  | "friendly_time_DESC"
  | "width_ASC"
  | "width_DESC"
  | "height_ASC"
  | "height_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserPhotoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "thumb_url_ASC"
  | "thumb_url_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "timestamp_ASC"
  | "timestamp_DESC"
  | "friendly_time_ASC"
  | "friendly_time_DESC"
  | "width_ASC"
  | "width_DESC"
  | "height_ASC"
  | "height_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "thumb_ASC"
  | "thumb_DESC"
  | "featured_image_ASC"
  | "featured_image_DESC"
  | "photos_url_ASC"
  | "photos_url_DESC"
  | "has_online_delivery_ASC"
  | "has_online_delivery_DESC"
  | "is_delivering_now_ASC"
  | "is_delivering_now_DESC"
  | "deeplink_ASC"
  | "deeplink_DESC"
  | "photo_count_ASC"
  | "photo_count_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductRatingOrderByInput =
  | "aggregate_rating_ASC"
  | "aggregate_rating_DESC"
  | "votes_ASC"
  | "votes_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "user_type_ASC"
  | "user_type_DESC"
  | "uid_ASC"
  | "uid_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PhoneNumberWhereInput {
  user?: UserWhereInput;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  AND?: PhoneNumberWhereInput[] | PhoneNumberWhereInput;
  OR?: PhoneNumberWhereInput[] | PhoneNumberWhereInput;
  NOT?: PhoneNumberWhereInput[] | PhoneNumberWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  phone_number_every?: PhoneNumberWhereInput;
  phone_number_some?: PhoneNumberWhereInput;
  phone_number_none?: PhoneNumberWhereInput;
  user_type?: UserType;
  user_type_not?: UserType;
  user_type_in?: UserType[] | UserType;
  user_type_not_in?: UserType[] | UserType;
  reviews_every?: ReviewWhereInput;
  reviews_some?: ReviewWhereInput;
  reviews_none?: ReviewWhereInput;
  photos_every?: UserPhotoWhereInput;
  photos_some?: UserPhotoWhereInput;
  photos_none?: UserPhotoWhereInput;
  uid?: String;
  uid_not?: String;
  uid_in?: String[] | String;
  uid_not_in?: String[] | String;
  uid_lt?: String;
  uid_lte?: String;
  uid_gt?: String;
  uid_gte?: String;
  uid_contains?: String;
  uid_not_contains?: String;
  uid_starts_with?: String;
  uid_not_starts_with?: String;
  uid_ends_with?: String;
  uid_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ReviewWhereInput {
  user?: UserWhereInput;
  product?: ProductWhereInput;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  rating?: Int;
  rating_not?: Int;
  rating_in?: Int[] | Int;
  rating_not_in?: Int[] | Int;
  rating_lt?: Int;
  rating_lte?: Int;
  rating_gt?: Int;
  rating_gte?: Int;
  review_text?: String;
  review_text_not?: String;
  review_text_in?: String[] | String;
  review_text_not_in?: String[] | String;
  review_text_lt?: String;
  review_text_lte?: String;
  review_text_gt?: String;
  review_text_gte?: String;
  review_text_contains?: String;
  review_text_not_contains?: String;
  review_text_starts_with?: String;
  review_text_not_starts_with?: String;
  review_text_ends_with?: String;
  review_text_not_ends_with?: String;
  review_time_friendly?: String;
  review_time_friendly_not?: String;
  review_time_friendly_in?: String[] | String;
  review_time_friendly_not_in?: String[] | String;
  review_time_friendly_lt?: String;
  review_time_friendly_lte?: String;
  review_time_friendly_gt?: String;
  review_time_friendly_gte?: String;
  review_time_friendly_contains?: String;
  review_time_friendly_not_contains?: String;
  review_time_friendly_starts_with?: String;
  review_time_friendly_not_starts_with?: String;
  review_time_friendly_ends_with?: String;
  review_time_friendly_not_ends_with?: String;
  timestamp?: Int;
  timestamp_not?: Int;
  timestamp_in?: Int[] | Int;
  timestamp_not_in?: Int[] | Int;
  timestamp_lt?: Int;
  timestamp_lte?: Int;
  timestamp_gt?: Int;
  timestamp_gte?: Int;
  AND?: ReviewWhereInput[] | ReviewWhereInput;
  OR?: ReviewWhereInput[] | ReviewWhereInput;
  NOT?: ReviewWhereInput[] | ReviewWhereInput;
}

export interface ProductWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  thumb?: String;
  thumb_not?: String;
  thumb_in?: String[] | String;
  thumb_not_in?: String[] | String;
  thumb_lt?: String;
  thumb_lte?: String;
  thumb_gt?: String;
  thumb_gte?: String;
  thumb_contains?: String;
  thumb_not_contains?: String;
  thumb_starts_with?: String;
  thumb_not_starts_with?: String;
  thumb_ends_with?: String;
  thumb_not_ends_with?: String;
  featured_image?: String;
  featured_image_not?: String;
  featured_image_in?: String[] | String;
  featured_image_not_in?: String[] | String;
  featured_image_lt?: String;
  featured_image_lte?: String;
  featured_image_gt?: String;
  featured_image_gte?: String;
  featured_image_contains?: String;
  featured_image_not_contains?: String;
  featured_image_starts_with?: String;
  featured_image_not_starts_with?: String;
  featured_image_ends_with?: String;
  featured_image_not_ends_with?: String;
  photos_url?: String;
  photos_url_not?: String;
  photos_url_in?: String[] | String;
  photos_url_not_in?: String[] | String;
  photos_url_lt?: String;
  photos_url_lte?: String;
  photos_url_gt?: String;
  photos_url_gte?: String;
  photos_url_contains?: String;
  photos_url_not_contains?: String;
  photos_url_starts_with?: String;
  photos_url_not_starts_with?: String;
  photos_url_ends_with?: String;
  photos_url_not_ends_with?: String;
  user_rating?: ProductRatingWhereInput;
  has_online_delivery?: Boolean;
  has_online_delivery_not?: Boolean;
  is_delivering_now?: Boolean;
  is_delivering_now_not?: Boolean;
  deeplink?: String;
  deeplink_not?: String;
  deeplink_in?: String[] | String;
  deeplink_not_in?: String[] | String;
  deeplink_lt?: String;
  deeplink_lte?: String;
  deeplink_gt?: String;
  deeplink_gte?: String;
  deeplink_contains?: String;
  deeplink_not_contains?: String;
  deeplink_starts_with?: String;
  deeplink_not_starts_with?: String;
  deeplink_ends_with?: String;
  deeplink_not_ends_with?: String;
  photo_count?: Int;
  photo_count_not?: Int;
  photo_count_in?: Int[] | Int;
  photo_count_not_in?: Int[] | Int;
  photo_count_lt?: Int;
  photo_count_lte?: Int;
  photo_count_gt?: Int;
  photo_count_gte?: Int;
  photos_every?: ProductPhotoWhereInput;
  photos_some?: ProductPhotoWhereInput;
  photos_none?: ProductPhotoWhereInput;
  all_reviews_every?: ReviewWhereInput;
  all_reviews_some?: ReviewWhereInput;
  all_reviews_none?: ReviewWhereInput;
  AND?: ProductWhereInput[] | ProductWhereInput;
  OR?: ProductWhereInput[] | ProductWhereInput;
  NOT?: ProductWhereInput[] | ProductWhereInput;
}

export interface ProductRatingWhereInput {
  aggregate_rating?: Float;
  aggregate_rating_not?: Float;
  aggregate_rating_in?: Float[] | Float;
  aggregate_rating_not_in?: Float[] | Float;
  aggregate_rating_lt?: Float;
  aggregate_rating_lte?: Float;
  aggregate_rating_gt?: Float;
  aggregate_rating_gte?: Float;
  votes?: Int;
  votes_not?: Int;
  votes_in?: Int[] | Int;
  votes_not_in?: Int[] | Int;
  votes_lt?: Int;
  votes_lte?: Int;
  votes_gt?: Int;
  votes_gte?: Int;
  AND?: ProductRatingWhereInput[] | ProductRatingWhereInput;
  OR?: ProductRatingWhereInput[] | ProductRatingWhereInput;
  NOT?: ProductRatingWhereInput[] | ProductRatingWhereInput;
}

export interface ProductPhotoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  product?: ProductWhereInput;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  thumb_url?: String;
  thumb_url_not?: String;
  thumb_url_in?: String[] | String;
  thumb_url_not_in?: String[] | String;
  thumb_url_lt?: String;
  thumb_url_lte?: String;
  thumb_url_gt?: String;
  thumb_url_gte?: String;
  thumb_url_contains?: String;
  thumb_url_not_contains?: String;
  thumb_url_starts_with?: String;
  thumb_url_not_starts_with?: String;
  thumb_url_ends_with?: String;
  thumb_url_not_ends_with?: String;
  caption?: String;
  caption_not?: String;
  caption_in?: String[] | String;
  caption_not_in?: String[] | String;
  caption_lt?: String;
  caption_lte?: String;
  caption_gt?: String;
  caption_gte?: String;
  caption_contains?: String;
  caption_not_contains?: String;
  caption_starts_with?: String;
  caption_not_starts_with?: String;
  caption_ends_with?: String;
  caption_not_ends_with?: String;
  timestamp?: Int;
  timestamp_not?: Int;
  timestamp_in?: Int[] | Int;
  timestamp_not_in?: Int[] | Int;
  timestamp_lt?: Int;
  timestamp_lte?: Int;
  timestamp_gt?: Int;
  timestamp_gte?: Int;
  friendly_time?: String;
  friendly_time_not?: String;
  friendly_time_in?: String[] | String;
  friendly_time_not_in?: String[] | String;
  friendly_time_lt?: String;
  friendly_time_lte?: String;
  friendly_time_gt?: String;
  friendly_time_gte?: String;
  friendly_time_contains?: String;
  friendly_time_not_contains?: String;
  friendly_time_starts_with?: String;
  friendly_time_not_starts_with?: String;
  friendly_time_ends_with?: String;
  friendly_time_not_ends_with?: String;
  width?: Int;
  width_not?: Int;
  width_in?: Int[] | Int;
  width_not_in?: Int[] | Int;
  width_lt?: Int;
  width_lte?: Int;
  width_gt?: Int;
  width_gte?: Int;
  height?: Int;
  height_not?: Int;
  height_in?: Int[] | Int;
  height_not_in?: Int[] | Int;
  height_lt?: Int;
  height_lte?: Int;
  height_gt?: Int;
  height_gte?: Int;
  AND?: ProductPhotoWhereInput[] | ProductPhotoWhereInput;
  OR?: ProductPhotoWhereInput[] | ProductPhotoWhereInput;
  NOT?: ProductPhotoWhereInput[] | ProductPhotoWhereInput;
}

export interface UserPhotoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  thumb_url?: String;
  thumb_url_not?: String;
  thumb_url_in?: String[] | String;
  thumb_url_not_in?: String[] | String;
  thumb_url_lt?: String;
  thumb_url_lte?: String;
  thumb_url_gt?: String;
  thumb_url_gte?: String;
  thumb_url_contains?: String;
  thumb_url_not_contains?: String;
  thumb_url_starts_with?: String;
  thumb_url_not_starts_with?: String;
  thumb_url_ends_with?: String;
  thumb_url_not_ends_with?: String;
  caption?: String;
  caption_not?: String;
  caption_in?: String[] | String;
  caption_not_in?: String[] | String;
  caption_lt?: String;
  caption_lte?: String;
  caption_gt?: String;
  caption_gte?: String;
  caption_contains?: String;
  caption_not_contains?: String;
  caption_starts_with?: String;
  caption_not_starts_with?: String;
  caption_ends_with?: String;
  caption_not_ends_with?: String;
  timestamp?: Int;
  timestamp_not?: Int;
  timestamp_in?: Int[] | Int;
  timestamp_not_in?: Int[] | Int;
  timestamp_lt?: Int;
  timestamp_lte?: Int;
  timestamp_gt?: Int;
  timestamp_gte?: Int;
  friendly_time?: String;
  friendly_time_not?: String;
  friendly_time_in?: String[] | String;
  friendly_time_not_in?: String[] | String;
  friendly_time_lt?: String;
  friendly_time_lte?: String;
  friendly_time_gt?: String;
  friendly_time_gte?: String;
  friendly_time_contains?: String;
  friendly_time_not_contains?: String;
  friendly_time_starts_with?: String;
  friendly_time_not_starts_with?: String;
  friendly_time_ends_with?: String;
  friendly_time_not_ends_with?: String;
  width?: Int;
  width_not?: Int;
  width_in?: Int[] | Int;
  width_not_in?: Int[] | Int;
  width_lt?: Int;
  width_lte?: Int;
  width_gt?: Int;
  width_gte?: Int;
  height?: Int;
  height_not?: Int;
  height_in?: Int[] | Int;
  height_not_in?: Int[] | Int;
  height_lt?: Int;
  height_lte?: Int;
  height_gt?: Int;
  height_gte?: Int;
  AND?: UserPhotoWhereInput[] | UserPhotoWhereInput;
  OR?: UserPhotoWhereInput[] | UserPhotoWhereInput;
  NOT?: UserPhotoWhereInput[] | UserPhotoWhereInput;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type ProductPhotoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type ReviewWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  uid?: String;
}>;

export type UserPhotoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PhoneNumberCreateInput {
  user: UserCreateOneWithoutPhone_numberInput;
  code?: String;
  phone: String;
}

export interface UserCreateOneWithoutPhone_numberInput {
  create?: UserCreateWithoutPhone_numberInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutPhone_numberInput {
  email?: String;
  name: String;
  user_type?: UserType;
  reviews?: ReviewCreateManyWithoutUserInput;
  photos?: UserPhotoCreateManyWithoutUserInput;
  uid: String;
}

export interface ReviewCreateManyWithoutUserInput {
  create?: ReviewCreateWithoutUserInput[] | ReviewCreateWithoutUserInput;
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
}

export interface ReviewCreateWithoutUserInput {
  product: ProductCreateOneWithoutAll_reviewsInput;
  rating: Int;
  review_text: String;
  review_time_friendly: String;
  timestamp: Int;
}

export interface ProductCreateOneWithoutAll_reviewsInput {
  create?: ProductCreateWithoutAll_reviewsInput;
  connect?: ProductWhereUniqueInput;
}

export interface ProductCreateWithoutAll_reviewsInput {
  name: String;
  url: String;
  thumb?: String;
  featured_image?: String;
  photos_url?: String;
  user_rating: ProductRatingCreateOneInput;
  has_online_delivery?: Boolean;
  is_delivering_now?: Boolean;
  deeplink?: String;
  photo_count: Int;
  photos?: ProductPhotoCreateManyWithoutProductInput;
}

export interface ProductRatingCreateOneInput {
  create?: ProductRatingCreateInput;
}

export interface ProductRatingCreateInput {
  aggregate_rating?: Float;
  votes?: Int;
}

export interface ProductPhotoCreateManyWithoutProductInput {
  create?:
    | ProductPhotoCreateWithoutProductInput[]
    | ProductPhotoCreateWithoutProductInput;
  connect?: ProductPhotoWhereUniqueInput[] | ProductPhotoWhereUniqueInput;
}

export interface ProductPhotoCreateWithoutProductInput {
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface UserPhotoCreateManyWithoutUserInput {
  create?: UserPhotoCreateWithoutUserInput[] | UserPhotoCreateWithoutUserInput;
  connect?: UserPhotoWhereUniqueInput[] | UserPhotoWhereUniqueInput;
}

export interface UserPhotoCreateWithoutUserInput {
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface PhoneNumberUpdateManyMutationInput {
  code?: String;
  phone?: String;
}

export interface ProductCreateInput {
  name: String;
  url: String;
  thumb?: String;
  featured_image?: String;
  photos_url?: String;
  user_rating: ProductRatingCreateOneInput;
  has_online_delivery?: Boolean;
  is_delivering_now?: Boolean;
  deeplink?: String;
  photo_count: Int;
  photos?: ProductPhotoCreateManyWithoutProductInput;
  all_reviews?: ReviewCreateManyWithoutProductInput;
}

export interface ReviewCreateManyWithoutProductInput {
  create?: ReviewCreateWithoutProductInput[] | ReviewCreateWithoutProductInput;
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
}

export interface ReviewCreateWithoutProductInput {
  user: UserCreateOneWithoutReviewsInput;
  rating: Int;
  review_text: String;
  review_time_friendly: String;
  timestamp: Int;
}

export interface UserCreateOneWithoutReviewsInput {
  create?: UserCreateWithoutReviewsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutReviewsInput {
  email?: String;
  name: String;
  phone_number?: PhoneNumberCreateManyWithoutUserInput;
  user_type?: UserType;
  photos?: UserPhotoCreateManyWithoutUserInput;
  uid: String;
}

export interface PhoneNumberCreateManyWithoutUserInput {
  create?:
    | PhoneNumberCreateWithoutUserInput[]
    | PhoneNumberCreateWithoutUserInput;
}

export interface PhoneNumberCreateWithoutUserInput {
  code?: String;
  phone: String;
}

export interface ProductUpdateInput {
  name?: String;
  url?: String;
  thumb?: String;
  featured_image?: String;
  photos_url?: String;
  user_rating?: ProductRatingUpdateOneRequiredInput;
  has_online_delivery?: Boolean;
  is_delivering_now?: Boolean;
  deeplink?: String;
  photo_count?: Int;
  photos?: ProductPhotoUpdateManyWithoutProductInput;
  all_reviews?: ReviewUpdateManyWithoutProductInput;
}

export interface ProductRatingUpdateOneRequiredInput {
  create?: ProductRatingCreateInput;
  update?: ProductRatingUpdateDataInput;
  upsert?: ProductRatingUpsertNestedInput;
}

export interface ProductRatingUpdateDataInput {
  aggregate_rating?: Float;
  votes?: Int;
}

export interface ProductRatingUpsertNestedInput {
  update: ProductRatingUpdateDataInput;
  create: ProductRatingCreateInput;
}

export interface ProductPhotoUpdateManyWithoutProductInput {
  create?:
    | ProductPhotoCreateWithoutProductInput[]
    | ProductPhotoCreateWithoutProductInput;
  delete?: ProductPhotoWhereUniqueInput[] | ProductPhotoWhereUniqueInput;
  connect?: ProductPhotoWhereUniqueInput[] | ProductPhotoWhereUniqueInput;
  set?: ProductPhotoWhereUniqueInput[] | ProductPhotoWhereUniqueInput;
  disconnect?: ProductPhotoWhereUniqueInput[] | ProductPhotoWhereUniqueInput;
  update?:
    | ProductPhotoUpdateWithWhereUniqueWithoutProductInput[]
    | ProductPhotoUpdateWithWhereUniqueWithoutProductInput;
  upsert?:
    | ProductPhotoUpsertWithWhereUniqueWithoutProductInput[]
    | ProductPhotoUpsertWithWhereUniqueWithoutProductInput;
  deleteMany?: ProductPhotoScalarWhereInput[] | ProductPhotoScalarWhereInput;
  updateMany?:
    | ProductPhotoUpdateManyWithWhereNestedInput[]
    | ProductPhotoUpdateManyWithWhereNestedInput;
}

export interface ProductPhotoUpdateWithWhereUniqueWithoutProductInput {
  where: ProductPhotoWhereUniqueInput;
  data: ProductPhotoUpdateWithoutProductDataInput;
}

export interface ProductPhotoUpdateWithoutProductDataInput {
  url?: String;
  thumb_url?: String;
  caption?: String;
  timestamp?: Int;
  friendly_time?: String;
  width?: Int;
  height?: Int;
}

export interface ProductPhotoUpsertWithWhereUniqueWithoutProductInput {
  where: ProductPhotoWhereUniqueInput;
  update: ProductPhotoUpdateWithoutProductDataInput;
  create: ProductPhotoCreateWithoutProductInput;
}

export interface ProductPhotoScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  thumb_url?: String;
  thumb_url_not?: String;
  thumb_url_in?: String[] | String;
  thumb_url_not_in?: String[] | String;
  thumb_url_lt?: String;
  thumb_url_lte?: String;
  thumb_url_gt?: String;
  thumb_url_gte?: String;
  thumb_url_contains?: String;
  thumb_url_not_contains?: String;
  thumb_url_starts_with?: String;
  thumb_url_not_starts_with?: String;
  thumb_url_ends_with?: String;
  thumb_url_not_ends_with?: String;
  caption?: String;
  caption_not?: String;
  caption_in?: String[] | String;
  caption_not_in?: String[] | String;
  caption_lt?: String;
  caption_lte?: String;
  caption_gt?: String;
  caption_gte?: String;
  caption_contains?: String;
  caption_not_contains?: String;
  caption_starts_with?: String;
  caption_not_starts_with?: String;
  caption_ends_with?: String;
  caption_not_ends_with?: String;
  timestamp?: Int;
  timestamp_not?: Int;
  timestamp_in?: Int[] | Int;
  timestamp_not_in?: Int[] | Int;
  timestamp_lt?: Int;
  timestamp_lte?: Int;
  timestamp_gt?: Int;
  timestamp_gte?: Int;
  friendly_time?: String;
  friendly_time_not?: String;
  friendly_time_in?: String[] | String;
  friendly_time_not_in?: String[] | String;
  friendly_time_lt?: String;
  friendly_time_lte?: String;
  friendly_time_gt?: String;
  friendly_time_gte?: String;
  friendly_time_contains?: String;
  friendly_time_not_contains?: String;
  friendly_time_starts_with?: String;
  friendly_time_not_starts_with?: String;
  friendly_time_ends_with?: String;
  friendly_time_not_ends_with?: String;
  width?: Int;
  width_not?: Int;
  width_in?: Int[] | Int;
  width_not_in?: Int[] | Int;
  width_lt?: Int;
  width_lte?: Int;
  width_gt?: Int;
  width_gte?: Int;
  height?: Int;
  height_not?: Int;
  height_in?: Int[] | Int;
  height_not_in?: Int[] | Int;
  height_lt?: Int;
  height_lte?: Int;
  height_gt?: Int;
  height_gte?: Int;
  AND?: ProductPhotoScalarWhereInput[] | ProductPhotoScalarWhereInput;
  OR?: ProductPhotoScalarWhereInput[] | ProductPhotoScalarWhereInput;
  NOT?: ProductPhotoScalarWhereInput[] | ProductPhotoScalarWhereInput;
}

export interface ProductPhotoUpdateManyWithWhereNestedInput {
  where: ProductPhotoScalarWhereInput;
  data: ProductPhotoUpdateManyDataInput;
}

export interface ProductPhotoUpdateManyDataInput {
  url?: String;
  thumb_url?: String;
  caption?: String;
  timestamp?: Int;
  friendly_time?: String;
  width?: Int;
  height?: Int;
}

export interface ReviewUpdateManyWithoutProductInput {
  create?: ReviewCreateWithoutProductInput[] | ReviewCreateWithoutProductInput;
  delete?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  set?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  disconnect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  update?:
    | ReviewUpdateWithWhereUniqueWithoutProductInput[]
    | ReviewUpdateWithWhereUniqueWithoutProductInput;
  upsert?:
    | ReviewUpsertWithWhereUniqueWithoutProductInput[]
    | ReviewUpsertWithWhereUniqueWithoutProductInput;
  deleteMany?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
  updateMany?:
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput;
}

export interface ReviewUpdateWithWhereUniqueWithoutProductInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutProductDataInput;
}

export interface ReviewUpdateWithoutProductDataInput {
  user?: UserUpdateOneRequiredWithoutReviewsInput;
  rating?: Int;
  review_text?: String;
  review_time_friendly?: String;
  timestamp?: Int;
}

export interface UserUpdateOneRequiredWithoutReviewsInput {
  create?: UserCreateWithoutReviewsInput;
  update?: UserUpdateWithoutReviewsDataInput;
  upsert?: UserUpsertWithoutReviewsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutReviewsDataInput {
  email?: String;
  name?: String;
  phone_number?: PhoneNumberUpdateManyWithoutUserInput;
  user_type?: UserType;
  photos?: UserPhotoUpdateManyWithoutUserInput;
  uid?: String;
}

export interface PhoneNumberUpdateManyWithoutUserInput {
  create?:
    | PhoneNumberCreateWithoutUserInput[]
    | PhoneNumberCreateWithoutUserInput;
  deleteMany?: PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput;
  updateMany?:
    | PhoneNumberUpdateManyWithWhereNestedInput[]
    | PhoneNumberUpdateManyWithWhereNestedInput;
}

export interface PhoneNumberScalarWhereInput {
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  AND?: PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput;
  OR?: PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput;
  NOT?: PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput;
}

export interface PhoneNumberUpdateManyWithWhereNestedInput {
  where: PhoneNumberScalarWhereInput;
  data: PhoneNumberUpdateManyDataInput;
}

export interface PhoneNumberUpdateManyDataInput {
  code?: String;
  phone?: String;
}

export interface UserPhotoUpdateManyWithoutUserInput {
  create?: UserPhotoCreateWithoutUserInput[] | UserPhotoCreateWithoutUserInput;
  delete?: UserPhotoWhereUniqueInput[] | UserPhotoWhereUniqueInput;
  connect?: UserPhotoWhereUniqueInput[] | UserPhotoWhereUniqueInput;
  set?: UserPhotoWhereUniqueInput[] | UserPhotoWhereUniqueInput;
  disconnect?: UserPhotoWhereUniqueInput[] | UserPhotoWhereUniqueInput;
  update?:
    | UserPhotoUpdateWithWhereUniqueWithoutUserInput[]
    | UserPhotoUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | UserPhotoUpsertWithWhereUniqueWithoutUserInput[]
    | UserPhotoUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: UserPhotoScalarWhereInput[] | UserPhotoScalarWhereInput;
  updateMany?:
    | UserPhotoUpdateManyWithWhereNestedInput[]
    | UserPhotoUpdateManyWithWhereNestedInput;
}

export interface UserPhotoUpdateWithWhereUniqueWithoutUserInput {
  where: UserPhotoWhereUniqueInput;
  data: UserPhotoUpdateWithoutUserDataInput;
}

export interface UserPhotoUpdateWithoutUserDataInput {
  url?: String;
  thumb_url?: String;
  caption?: String;
  timestamp?: Int;
  friendly_time?: String;
  width?: Int;
  height?: Int;
}

export interface UserPhotoUpsertWithWhereUniqueWithoutUserInput {
  where: UserPhotoWhereUniqueInput;
  update: UserPhotoUpdateWithoutUserDataInput;
  create: UserPhotoCreateWithoutUserInput;
}

export interface UserPhotoScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  thumb_url?: String;
  thumb_url_not?: String;
  thumb_url_in?: String[] | String;
  thumb_url_not_in?: String[] | String;
  thumb_url_lt?: String;
  thumb_url_lte?: String;
  thumb_url_gt?: String;
  thumb_url_gte?: String;
  thumb_url_contains?: String;
  thumb_url_not_contains?: String;
  thumb_url_starts_with?: String;
  thumb_url_not_starts_with?: String;
  thumb_url_ends_with?: String;
  thumb_url_not_ends_with?: String;
  caption?: String;
  caption_not?: String;
  caption_in?: String[] | String;
  caption_not_in?: String[] | String;
  caption_lt?: String;
  caption_lte?: String;
  caption_gt?: String;
  caption_gte?: String;
  caption_contains?: String;
  caption_not_contains?: String;
  caption_starts_with?: String;
  caption_not_starts_with?: String;
  caption_ends_with?: String;
  caption_not_ends_with?: String;
  timestamp?: Int;
  timestamp_not?: Int;
  timestamp_in?: Int[] | Int;
  timestamp_not_in?: Int[] | Int;
  timestamp_lt?: Int;
  timestamp_lte?: Int;
  timestamp_gt?: Int;
  timestamp_gte?: Int;
  friendly_time?: String;
  friendly_time_not?: String;
  friendly_time_in?: String[] | String;
  friendly_time_not_in?: String[] | String;
  friendly_time_lt?: String;
  friendly_time_lte?: String;
  friendly_time_gt?: String;
  friendly_time_gte?: String;
  friendly_time_contains?: String;
  friendly_time_not_contains?: String;
  friendly_time_starts_with?: String;
  friendly_time_not_starts_with?: String;
  friendly_time_ends_with?: String;
  friendly_time_not_ends_with?: String;
  width?: Int;
  width_not?: Int;
  width_in?: Int[] | Int;
  width_not_in?: Int[] | Int;
  width_lt?: Int;
  width_lte?: Int;
  width_gt?: Int;
  width_gte?: Int;
  height?: Int;
  height_not?: Int;
  height_in?: Int[] | Int;
  height_not_in?: Int[] | Int;
  height_lt?: Int;
  height_lte?: Int;
  height_gt?: Int;
  height_gte?: Int;
  AND?: UserPhotoScalarWhereInput[] | UserPhotoScalarWhereInput;
  OR?: UserPhotoScalarWhereInput[] | UserPhotoScalarWhereInput;
  NOT?: UserPhotoScalarWhereInput[] | UserPhotoScalarWhereInput;
}

export interface UserPhotoUpdateManyWithWhereNestedInput {
  where: UserPhotoScalarWhereInput;
  data: UserPhotoUpdateManyDataInput;
}

export interface UserPhotoUpdateManyDataInput {
  url?: String;
  thumb_url?: String;
  caption?: String;
  timestamp?: Int;
  friendly_time?: String;
  width?: Int;
  height?: Int;
}

export interface UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput;
  create: UserCreateWithoutReviewsInput;
}

export interface ReviewUpsertWithWhereUniqueWithoutProductInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutProductDataInput;
  create: ReviewCreateWithoutProductInput;
}

export interface ReviewScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  rating?: Int;
  rating_not?: Int;
  rating_in?: Int[] | Int;
  rating_not_in?: Int[] | Int;
  rating_lt?: Int;
  rating_lte?: Int;
  rating_gt?: Int;
  rating_gte?: Int;
  review_text?: String;
  review_text_not?: String;
  review_text_in?: String[] | String;
  review_text_not_in?: String[] | String;
  review_text_lt?: String;
  review_text_lte?: String;
  review_text_gt?: String;
  review_text_gte?: String;
  review_text_contains?: String;
  review_text_not_contains?: String;
  review_text_starts_with?: String;
  review_text_not_starts_with?: String;
  review_text_ends_with?: String;
  review_text_not_ends_with?: String;
  review_time_friendly?: String;
  review_time_friendly_not?: String;
  review_time_friendly_in?: String[] | String;
  review_time_friendly_not_in?: String[] | String;
  review_time_friendly_lt?: String;
  review_time_friendly_lte?: String;
  review_time_friendly_gt?: String;
  review_time_friendly_gte?: String;
  review_time_friendly_contains?: String;
  review_time_friendly_not_contains?: String;
  review_time_friendly_starts_with?: String;
  review_time_friendly_not_starts_with?: String;
  review_time_friendly_ends_with?: String;
  review_time_friendly_not_ends_with?: String;
  timestamp?: Int;
  timestamp_not?: Int;
  timestamp_in?: Int[] | Int;
  timestamp_not_in?: Int[] | Int;
  timestamp_lt?: Int;
  timestamp_lte?: Int;
  timestamp_gt?: Int;
  timestamp_gte?: Int;
  AND?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
  OR?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
  NOT?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
}

export interface ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput;
  data: ReviewUpdateManyDataInput;
}

export interface ReviewUpdateManyDataInput {
  rating?: Int;
  review_text?: String;
  review_time_friendly?: String;
  timestamp?: Int;
}

export interface ProductUpdateManyMutationInput {
  name?: String;
  url?: String;
  thumb?: String;
  featured_image?: String;
  photos_url?: String;
  has_online_delivery?: Boolean;
  is_delivering_now?: Boolean;
  deeplink?: String;
  photo_count?: Int;
}

export interface ProductPhotoCreateInput {
  product: ProductCreateOneWithoutPhotosInput;
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface ProductCreateOneWithoutPhotosInput {
  create?: ProductCreateWithoutPhotosInput;
  connect?: ProductWhereUniqueInput;
}

export interface ProductCreateWithoutPhotosInput {
  name: String;
  url: String;
  thumb?: String;
  featured_image?: String;
  photos_url?: String;
  user_rating: ProductRatingCreateOneInput;
  has_online_delivery?: Boolean;
  is_delivering_now?: Boolean;
  deeplink?: String;
  photo_count: Int;
  all_reviews?: ReviewCreateManyWithoutProductInput;
}

export interface ProductPhotoUpdateInput {
  product?: ProductUpdateOneRequiredWithoutPhotosInput;
  url?: String;
  thumb_url?: String;
  caption?: String;
  timestamp?: Int;
  friendly_time?: String;
  width?: Int;
  height?: Int;
}

export interface ProductUpdateOneRequiredWithoutPhotosInput {
  create?: ProductCreateWithoutPhotosInput;
  update?: ProductUpdateWithoutPhotosDataInput;
  upsert?: ProductUpsertWithoutPhotosInput;
  connect?: ProductWhereUniqueInput;
}

export interface ProductUpdateWithoutPhotosDataInput {
  name?: String;
  url?: String;
  thumb?: String;
  featured_image?: String;
  photos_url?: String;
  user_rating?: ProductRatingUpdateOneRequiredInput;
  has_online_delivery?: Boolean;
  is_delivering_now?: Boolean;
  deeplink?: String;
  photo_count?: Int;
  all_reviews?: ReviewUpdateManyWithoutProductInput;
}

export interface ProductUpsertWithoutPhotosInput {
  update: ProductUpdateWithoutPhotosDataInput;
  create: ProductCreateWithoutPhotosInput;
}

export interface ProductPhotoUpdateManyMutationInput {
  url?: String;
  thumb_url?: String;
  caption?: String;
  timestamp?: Int;
  friendly_time?: String;
  width?: Int;
  height?: Int;
}

export interface ProductRatingUpdateManyMutationInput {
  aggregate_rating?: Float;
  votes?: Int;
}

export interface ReviewCreateInput {
  user: UserCreateOneWithoutReviewsInput;
  product: ProductCreateOneWithoutAll_reviewsInput;
  rating: Int;
  review_text: String;
  review_time_friendly: String;
  timestamp: Int;
}

export interface ReviewUpdateInput {
  user?: UserUpdateOneRequiredWithoutReviewsInput;
  product?: ProductUpdateOneRequiredWithoutAll_reviewsInput;
  rating?: Int;
  review_text?: String;
  review_time_friendly?: String;
  timestamp?: Int;
}

export interface ProductUpdateOneRequiredWithoutAll_reviewsInput {
  create?: ProductCreateWithoutAll_reviewsInput;
  update?: ProductUpdateWithoutAll_reviewsDataInput;
  upsert?: ProductUpsertWithoutAll_reviewsInput;
  connect?: ProductWhereUniqueInput;
}

export interface ProductUpdateWithoutAll_reviewsDataInput {
  name?: String;
  url?: String;
  thumb?: String;
  featured_image?: String;
  photos_url?: String;
  user_rating?: ProductRatingUpdateOneRequiredInput;
  has_online_delivery?: Boolean;
  is_delivering_now?: Boolean;
  deeplink?: String;
  photo_count?: Int;
  photos?: ProductPhotoUpdateManyWithoutProductInput;
}

export interface ProductUpsertWithoutAll_reviewsInput {
  update: ProductUpdateWithoutAll_reviewsDataInput;
  create: ProductCreateWithoutAll_reviewsInput;
}

export interface ReviewUpdateManyMutationInput {
  rating?: Int;
  review_text?: String;
  review_time_friendly?: String;
  timestamp?: Int;
}

export interface UserCreateInput {
  email?: String;
  name: String;
  phone_number?: PhoneNumberCreateManyWithoutUserInput;
  user_type?: UserType;
  reviews?: ReviewCreateManyWithoutUserInput;
  photos?: UserPhotoCreateManyWithoutUserInput;
  uid: String;
}

export interface UserUpdateInput {
  email?: String;
  name?: String;
  phone_number?: PhoneNumberUpdateManyWithoutUserInput;
  user_type?: UserType;
  reviews?: ReviewUpdateManyWithoutUserInput;
  photos?: UserPhotoUpdateManyWithoutUserInput;
  uid?: String;
}

export interface ReviewUpdateManyWithoutUserInput {
  create?: ReviewCreateWithoutUserInput[] | ReviewCreateWithoutUserInput;
  delete?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  set?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  disconnect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  update?:
    | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    | ReviewUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    | ReviewUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
  updateMany?:
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput;
}

export interface ReviewUpdateWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutUserDataInput;
}

export interface ReviewUpdateWithoutUserDataInput {
  product?: ProductUpdateOneRequiredWithoutAll_reviewsInput;
  rating?: Int;
  review_text?: String;
  review_time_friendly?: String;
  timestamp?: Int;
}

export interface ReviewUpsertWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutUserDataInput;
  create: ReviewCreateWithoutUserInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  name?: String;
  user_type?: UserType;
  uid?: String;
}

export interface UserPhotoCreateInput {
  user: UserCreateOneWithoutPhotosInput;
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface UserCreateOneWithoutPhotosInput {
  create?: UserCreateWithoutPhotosInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutPhotosInput {
  email?: String;
  name: String;
  phone_number?: PhoneNumberCreateManyWithoutUserInput;
  user_type?: UserType;
  reviews?: ReviewCreateManyWithoutUserInput;
  uid: String;
}

export interface UserPhotoUpdateInput {
  user?: UserUpdateOneRequiredWithoutPhotosInput;
  url?: String;
  thumb_url?: String;
  caption?: String;
  timestamp?: Int;
  friendly_time?: String;
  width?: Int;
  height?: Int;
}

export interface UserUpdateOneRequiredWithoutPhotosInput {
  create?: UserCreateWithoutPhotosInput;
  update?: UserUpdateWithoutPhotosDataInput;
  upsert?: UserUpsertWithoutPhotosInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutPhotosDataInput {
  email?: String;
  name?: String;
  phone_number?: PhoneNumberUpdateManyWithoutUserInput;
  user_type?: UserType;
  reviews?: ReviewUpdateManyWithoutUserInput;
  uid?: String;
}

export interface UserUpsertWithoutPhotosInput {
  update: UserUpdateWithoutPhotosDataInput;
  create: UserCreateWithoutPhotosInput;
}

export interface UserPhotoUpdateManyMutationInput {
  url?: String;
  thumb_url?: String;
  caption?: String;
  timestamp?: Int;
  friendly_time?: String;
  width?: Int;
  height?: Int;
}

export interface PhoneNumberSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PhoneNumberWhereInput;
  AND?: PhoneNumberSubscriptionWhereInput[] | PhoneNumberSubscriptionWhereInput;
  OR?: PhoneNumberSubscriptionWhereInput[] | PhoneNumberSubscriptionWhereInput;
  NOT?: PhoneNumberSubscriptionWhereInput[] | PhoneNumberSubscriptionWhereInput;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductWhereInput;
  AND?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  OR?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  NOT?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
}

export interface ProductPhotoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductPhotoWhereInput;
  AND?:
    | ProductPhotoSubscriptionWhereInput[]
    | ProductPhotoSubscriptionWhereInput;
  OR?:
    | ProductPhotoSubscriptionWhereInput[]
    | ProductPhotoSubscriptionWhereInput;
  NOT?:
    | ProductPhotoSubscriptionWhereInput[]
    | ProductPhotoSubscriptionWhereInput;
}

export interface ProductRatingSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductRatingWhereInput;
  AND?:
    | ProductRatingSubscriptionWhereInput[]
    | ProductRatingSubscriptionWhereInput;
  OR?:
    | ProductRatingSubscriptionWhereInput[]
    | ProductRatingSubscriptionWhereInput;
  NOT?:
    | ProductRatingSubscriptionWhereInput[]
    | ProductRatingSubscriptionWhereInput;
}

export interface ReviewSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ReviewWhereInput;
  AND?: ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput;
  OR?: ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput;
  NOT?: ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserPhotoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserPhotoWhereInput;
  AND?: UserPhotoSubscriptionWhereInput[] | UserPhotoSubscriptionWhereInput;
  OR?: UserPhotoSubscriptionWhereInput[] | UserPhotoSubscriptionWhereInput;
  NOT?: UserPhotoSubscriptionWhereInput[] | UserPhotoSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface PhoneNumber {
  code: String;
  phone: String;
}

export interface PhoneNumberPromise extends Promise<PhoneNumber>, Fragmentable {
  user: <T = UserPromise>() => T;
  code: () => Promise<String>;
  phone: () => Promise<String>;
}

export interface PhoneNumberSubscription
  extends Promise<AsyncIterator<PhoneNumber>>,
    Fragmentable {
  user: <T = UserSubscription>() => T;
  code: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email?: String;
  name: String;
  user_type: UserType;
  uid: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  phone_number: <T = FragmentableArray<PhoneNumber>>(
    args?: {
      where?: PhoneNumberWhereInput;
      orderBy?: PhoneNumberOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  user_type: () => Promise<UserType>;
  reviews: <T = FragmentableArray<Review>>(
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  photos: <T = FragmentableArray<UserPhoto>>(
    args?: {
      where?: UserPhotoWhereInput;
      orderBy?: UserPhotoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  uid: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone_number: <T = Promise<AsyncIterator<PhoneNumberSubscription>>>(
    args?: {
      where?: PhoneNumberWhereInput;
      orderBy?: PhoneNumberOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  user_type: () => Promise<AsyncIterator<UserType>>;
  reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  photos: <T = Promise<AsyncIterator<UserPhotoSubscription>>>(
    args?: {
      where?: UserPhotoWhereInput;
      orderBy?: UserPhotoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  uid: () => Promise<AsyncIterator<String>>;
}

export interface Review {
  id: ID_Output;
  rating: Int;
  review_text: String;
  review_time_friendly: String;
  timestamp: Int;
}

export interface ReviewPromise extends Promise<Review>, Fragmentable {
  user: <T = UserPromise>() => T;
  product: <T = ProductPromise>() => T;
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  review_text: () => Promise<String>;
  review_time_friendly: () => Promise<String>;
  timestamp: () => Promise<Int>;
}

export interface ReviewSubscription
  extends Promise<AsyncIterator<Review>>,
    Fragmentable {
  user: <T = UserSubscription>() => T;
  product: <T = ProductSubscription>() => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  review_text: () => Promise<AsyncIterator<String>>;
  review_time_friendly: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
}

export interface Product {
  id: ID_Output;
  name: String;
  url: String;
  thumb: String;
  featured_image: String;
  photos_url: String;
  has_online_delivery: Boolean;
  is_delivering_now: Boolean;
  deeplink?: String;
  photo_count: Int;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  thumb: () => Promise<String>;
  featured_image: () => Promise<String>;
  photos_url: () => Promise<String>;
  user_rating: <T = ProductRatingPromise>() => T;
  has_online_delivery: () => Promise<Boolean>;
  is_delivering_now: () => Promise<Boolean>;
  deeplink: () => Promise<String>;
  photo_count: () => Promise<Int>;
  photos: <T = FragmentableArray<ProductPhoto>>(
    args?: {
      where?: ProductPhotoWhereInput;
      orderBy?: ProductPhotoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  all_reviews: <T = FragmentableArray<Review>>(
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  thumb: () => Promise<AsyncIterator<String>>;
  featured_image: () => Promise<AsyncIterator<String>>;
  photos_url: () => Promise<AsyncIterator<String>>;
  user_rating: <T = ProductRatingSubscription>() => T;
  has_online_delivery: () => Promise<AsyncIterator<Boolean>>;
  is_delivering_now: () => Promise<AsyncIterator<Boolean>>;
  deeplink: () => Promise<AsyncIterator<String>>;
  photo_count: () => Promise<AsyncIterator<Int>>;
  photos: <T = Promise<AsyncIterator<ProductPhotoSubscription>>>(
    args?: {
      where?: ProductPhotoWhereInput;
      orderBy?: ProductPhotoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  all_reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProductRating {
  aggregate_rating: Float;
  votes: Int;
}

export interface ProductRatingPromise
  extends Promise<ProductRating>,
    Fragmentable {
  aggregate_rating: () => Promise<Float>;
  votes: () => Promise<Int>;
}

export interface ProductRatingSubscription
  extends Promise<AsyncIterator<ProductRating>>,
    Fragmentable {
  aggregate_rating: () => Promise<AsyncIterator<Float>>;
  votes: () => Promise<AsyncIterator<Int>>;
}

export interface ProductPhoto {
  id: ID_Output;
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface ProductPhotoPromise
  extends Promise<ProductPhoto>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  product: <T = ProductPromise>() => T;
  url: () => Promise<String>;
  thumb_url: () => Promise<String>;
  caption: () => Promise<String>;
  timestamp: () => Promise<Int>;
  friendly_time: () => Promise<String>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
}

export interface ProductPhotoSubscription
  extends Promise<AsyncIterator<ProductPhoto>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  product: <T = ProductSubscription>() => T;
  url: () => Promise<AsyncIterator<String>>;
  thumb_url: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
  friendly_time: () => Promise<AsyncIterator<String>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
}

export interface UserPhoto {
  id: ID_Output;
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface UserPhotoPromise extends Promise<UserPhoto>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  url: () => Promise<String>;
  thumb_url: () => Promise<String>;
  caption: () => Promise<String>;
  timestamp: () => Promise<Int>;
  friendly_time: () => Promise<String>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
}

export interface UserPhotoSubscription
  extends Promise<AsyncIterator<UserPhoto>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  url: () => Promise<AsyncIterator<String>>;
  thumb_url: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
  friendly_time: () => Promise<AsyncIterator<String>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
}

export interface PhoneNumberConnection {
  pageInfo: PageInfo;
  edges: PhoneNumberEdge[];
}

export interface PhoneNumberConnectionPromise
  extends Promise<PhoneNumberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PhoneNumberEdge>>() => T;
  aggregate: <T = AggregatePhoneNumberPromise>() => T;
}

export interface PhoneNumberConnectionSubscription
  extends Promise<AsyncIterator<PhoneNumberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PhoneNumberEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePhoneNumberSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PhoneNumberEdge {
  node: PhoneNumber;
  cursor: String;
}

export interface PhoneNumberEdgePromise
  extends Promise<PhoneNumberEdge>,
    Fragmentable {
  node: <T = PhoneNumberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PhoneNumberEdgeSubscription
  extends Promise<AsyncIterator<PhoneNumberEdge>>,
    Fragmentable {
  node: <T = PhoneNumberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePhoneNumber {
  count: Int;
}

export interface AggregatePhoneNumberPromise
  extends Promise<AggregatePhoneNumber>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePhoneNumberSubscription
  extends Promise<AsyncIterator<AggregatePhoneNumber>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductPhotoConnection {
  pageInfo: PageInfo;
  edges: ProductPhotoEdge[];
}

export interface ProductPhotoConnectionPromise
  extends Promise<ProductPhotoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductPhotoEdge>>() => T;
  aggregate: <T = AggregateProductPhotoPromise>() => T;
}

export interface ProductPhotoConnectionSubscription
  extends Promise<AsyncIterator<ProductPhotoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductPhotoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductPhotoSubscription>() => T;
}

export interface ProductPhotoEdge {
  node: ProductPhoto;
  cursor: String;
}

export interface ProductPhotoEdgePromise
  extends Promise<ProductPhotoEdge>,
    Fragmentable {
  node: <T = ProductPhotoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductPhotoEdgeSubscription
  extends Promise<AsyncIterator<ProductPhotoEdge>>,
    Fragmentable {
  node: <T = ProductPhotoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProductPhoto {
  count: Int;
}

export interface AggregateProductPhotoPromise
  extends Promise<AggregateProductPhoto>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductPhotoSubscription
  extends Promise<AsyncIterator<AggregateProductPhoto>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductRatingConnection {
  pageInfo: PageInfo;
  edges: ProductRatingEdge[];
}

export interface ProductRatingConnectionPromise
  extends Promise<ProductRatingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductRatingEdge>>() => T;
  aggregate: <T = AggregateProductRatingPromise>() => T;
}

export interface ProductRatingConnectionSubscription
  extends Promise<AsyncIterator<ProductRatingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductRatingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductRatingSubscription>() => T;
}

export interface ProductRatingEdge {
  node: ProductRating;
  cursor: String;
}

export interface ProductRatingEdgePromise
  extends Promise<ProductRatingEdge>,
    Fragmentable {
  node: <T = ProductRatingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductRatingEdgeSubscription
  extends Promise<AsyncIterator<ProductRatingEdge>>,
    Fragmentable {
  node: <T = ProductRatingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProductRating {
  count: Int;
}

export interface AggregateProductRatingPromise
  extends Promise<AggregateProductRating>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductRatingSubscription
  extends Promise<AsyncIterator<AggregateProductRating>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewConnection {
  pageInfo: PageInfo;
  edges: ReviewEdge[];
}

export interface ReviewConnectionPromise
  extends Promise<ReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewEdge>>() => T;
  aggregate: <T = AggregateReviewPromise>() => T;
}

export interface ReviewConnectionSubscription
  extends Promise<AsyncIterator<ReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewSubscription>() => T;
}

export interface ReviewEdge {
  node: Review;
  cursor: String;
}

export interface ReviewEdgePromise extends Promise<ReviewEdge>, Fragmentable {
  node: <T = ReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewEdgeSubscription
  extends Promise<AsyncIterator<ReviewEdge>>,
    Fragmentable {
  node: <T = ReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReview {
  count: Int;
}

export interface AggregateReviewPromise
  extends Promise<AggregateReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewSubscription
  extends Promise<AsyncIterator<AggregateReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserPhotoConnection {
  pageInfo: PageInfo;
  edges: UserPhotoEdge[];
}

export interface UserPhotoConnectionPromise
  extends Promise<UserPhotoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserPhotoEdge>>() => T;
  aggregate: <T = AggregateUserPhotoPromise>() => T;
}

export interface UserPhotoConnectionSubscription
  extends Promise<AsyncIterator<UserPhotoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserPhotoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserPhotoSubscription>() => T;
}

export interface UserPhotoEdge {
  node: UserPhoto;
  cursor: String;
}

export interface UserPhotoEdgePromise
  extends Promise<UserPhotoEdge>,
    Fragmentable {
  node: <T = UserPhotoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserPhotoEdgeSubscription
  extends Promise<AsyncIterator<UserPhotoEdge>>,
    Fragmentable {
  node: <T = UserPhotoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserPhoto {
  count: Int;
}

export interface AggregateUserPhotoPromise
  extends Promise<AggregateUserPhoto>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserPhotoSubscription
  extends Promise<AsyncIterator<AggregateUserPhoto>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PhoneNumberSubscriptionPayload {
  mutation: MutationType;
  node: PhoneNumber;
  updatedFields: String[];
  previousValues: PhoneNumberPreviousValues;
}

export interface PhoneNumberSubscriptionPayloadPromise
  extends Promise<PhoneNumberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PhoneNumberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PhoneNumberPreviousValuesPromise>() => T;
}

export interface PhoneNumberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PhoneNumberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PhoneNumberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PhoneNumberPreviousValuesSubscription>() => T;
}

export interface PhoneNumberPreviousValues {
  code: String;
  phone: String;
}

export interface PhoneNumberPreviousValuesPromise
  extends Promise<PhoneNumberPreviousValues>,
    Fragmentable {
  code: () => Promise<String>;
  phone: () => Promise<String>;
}

export interface PhoneNumberPreviousValuesSubscription
  extends Promise<AsyncIterator<PhoneNumberPreviousValues>>,
    Fragmentable {
  code: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  name: String;
  url: String;
  thumb: String;
  featured_image: String;
  photos_url: String;
  has_online_delivery: Boolean;
  is_delivering_now: Boolean;
  deeplink?: String;
  photo_count: Int;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  thumb: () => Promise<String>;
  featured_image: () => Promise<String>;
  photos_url: () => Promise<String>;
  has_online_delivery: () => Promise<Boolean>;
  is_delivering_now: () => Promise<Boolean>;
  deeplink: () => Promise<String>;
  photo_count: () => Promise<Int>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  thumb: () => Promise<AsyncIterator<String>>;
  featured_image: () => Promise<AsyncIterator<String>>;
  photos_url: () => Promise<AsyncIterator<String>>;
  has_online_delivery: () => Promise<AsyncIterator<Boolean>>;
  is_delivering_now: () => Promise<AsyncIterator<Boolean>>;
  deeplink: () => Promise<AsyncIterator<String>>;
  photo_count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductPhotoSubscriptionPayload {
  mutation: MutationType;
  node: ProductPhoto;
  updatedFields: String[];
  previousValues: ProductPhotoPreviousValues;
}

export interface ProductPhotoSubscriptionPayloadPromise
  extends Promise<ProductPhotoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPhotoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPhotoPreviousValuesPromise>() => T;
}

export interface ProductPhotoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductPhotoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductPhotoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPhotoPreviousValuesSubscription>() => T;
}

export interface ProductPhotoPreviousValues {
  id: ID_Output;
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface ProductPhotoPreviousValuesPromise
  extends Promise<ProductPhotoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  thumb_url: () => Promise<String>;
  caption: () => Promise<String>;
  timestamp: () => Promise<Int>;
  friendly_time: () => Promise<String>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
}

export interface ProductPhotoPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPhotoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  thumb_url: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
  friendly_time: () => Promise<AsyncIterator<String>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
}

export interface ProductRatingSubscriptionPayload {
  mutation: MutationType;
  node: ProductRating;
  updatedFields: String[];
  previousValues: ProductRatingPreviousValues;
}

export interface ProductRatingSubscriptionPayloadPromise
  extends Promise<ProductRatingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductRatingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductRatingPreviousValuesPromise>() => T;
}

export interface ProductRatingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductRatingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductRatingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductRatingPreviousValuesSubscription>() => T;
}

export interface ProductRatingPreviousValues {
  aggregate_rating: Float;
  votes: Int;
}

export interface ProductRatingPreviousValuesPromise
  extends Promise<ProductRatingPreviousValues>,
    Fragmentable {
  aggregate_rating: () => Promise<Float>;
  votes: () => Promise<Int>;
}

export interface ProductRatingPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductRatingPreviousValues>>,
    Fragmentable {
  aggregate_rating: () => Promise<AsyncIterator<Float>>;
  votes: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType;
  node: Review;
  updatedFields: String[];
  previousValues: ReviewPreviousValues;
}

export interface ReviewSubscriptionPayloadPromise
  extends Promise<ReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewPreviousValuesPromise>() => T;
}

export interface ReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewPreviousValuesSubscription>() => T;
}

export interface ReviewPreviousValues {
  id: ID_Output;
  rating: Int;
  review_text: String;
  review_time_friendly: String;
  timestamp: Int;
}

export interface ReviewPreviousValuesPromise
  extends Promise<ReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  review_text: () => Promise<String>;
  review_time_friendly: () => Promise<String>;
  timestamp: () => Promise<Int>;
}

export interface ReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  review_text: () => Promise<AsyncIterator<String>>;
  review_time_friendly: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email?: String;
  name: String;
  user_type: UserType;
  uid: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  user_type: () => Promise<UserType>;
  uid: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  user_type: () => Promise<AsyncIterator<UserType>>;
  uid: () => Promise<AsyncIterator<String>>;
}

export interface UserPhotoSubscriptionPayload {
  mutation: MutationType;
  node: UserPhoto;
  updatedFields: String[];
  previousValues: UserPhotoPreviousValues;
}

export interface UserPhotoSubscriptionPayloadPromise
  extends Promise<UserPhotoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPhotoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPhotoPreviousValuesPromise>() => T;
}

export interface UserPhotoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserPhotoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserPhotoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPhotoPreviousValuesSubscription>() => T;
}

export interface UserPhotoPreviousValues {
  id: ID_Output;
  url: String;
  thumb_url: String;
  caption: String;
  timestamp: Int;
  friendly_time: String;
  width: Int;
  height: Int;
}

export interface UserPhotoPreviousValuesPromise
  extends Promise<UserPhotoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  thumb_url: () => Promise<String>;
  caption: () => Promise<String>;
  timestamp: () => Promise<Int>;
  friendly_time: () => Promise<String>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
}

export interface UserPhotoPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPhotoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  thumb_url: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
  friendly_time: () => Promise<AsyncIterator<String>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "PhoneNumber",
    embedded: false
  },
  {
    name: "UserType",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "ProductRating",
    embedded: false
  },
  {
    name: "Review",
    embedded: false
  },
  {
    name: "ProductPhoto",
    embedded: false
  },
  {
    name: "UserPhoto",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/minze/demo/dev`
});
export const prisma = new Prisma();
